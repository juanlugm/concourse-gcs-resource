#!/bin/bash

source "$(dirname "$0")/functions.sh"

json_input=$(cat)  # Read JSON input from stdin
# {
#     "source": {
#       "bucket": "mybucket",
#       "versioned_file": "path/to/myobject", 
#       "debug": true,
#       "initial_version": "some_invented_generic_initial_version"      
#     },
#     "version": {
#         "ref": "61cbef"
#     }
# }

>&2 echo "Check..."

export debug=$(echo $json_input | jq -r .source.debug )

if [ "${debug}" = true ] ; then
    >&2 echo $json_input
fi

validate_inputs "$json_input" || exit 1

export bucket=$(echo $json_input | jq -r .source.bucket )
export versioned_file=$(echo $json_input | jq -r .source.versioned_file )
export initial_version=$(echo $json_input | jq -r .source.initial_version )
export version=$(echo $json_input | jq -r .version.ref )


gs_url="gs://${bucket}/${versioned_file}"

if [ -n "${version}" -a "${version}" != "null" ]; then
    gs_url="${gs_url}#${version}"
fi
 >&2 echo "${gs_url}"

if gcloud storage objects describe "${gs_url}" > object_metadata.yml; then
    if [ "${debug}" = true ] ; then
        >&2 cat object_metadata.yml
    fi
    current_version=$(cat object_metadata.yml | yq .generation)
else
    if [ -n "${initial_version}"  -a "${initial_version}" != "null" ]; then
      >&2 echo "Failed to retrieve object. Falling back to initial_version"
      current_version=$initial_version
    else
      >&2 echo "Failed to retrieve object and there is no initial version specified in source"
      exit 1
    fi
fi

## And we will output...
# The list with all versions after 62cbef
# 
# [
#   { "ref": "61cbef" },
#   { "ref": "d74e01" },
#   { "ref": "7154fe" }
# ]
#
# Or alternatively return just the latest (not the best solution because it doesn't allow pinning)
# 
##
echo "[ { \"ref\": \"${current_version}\" } ]"