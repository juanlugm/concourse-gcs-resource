#!/bin/bash
set -e

source "$(dirname "$0")/functions.sh"

export directory=$1


json_input=$(cat)  # Read JSON input from stdin
# {
#     "source": {
#       "bucket": "mybucket",
#       "versioned_file": "myobject",
#       "debug": true,  
#       "initial_version": "some_invented_generic_initial_version"
#       "initial_content_text": "Some random test to put in your first version"         
#       "initial_content_binary": "dGVzdAo="    
#     },
#     "params": {
#       "skip_download": true
#     },
#     "version": {
#         "ref": "61cbef"
#     }
# }

>&2 echo "Get ..."

export debug=$(echo $json_input | jq -r .source.debug )

if [ "${debug}" = true ] ; then
    >&2 cat $json_input
fi

validate_inputs $json_input && exit 1

export bucket=$(echo $json_input | jq -r .source.bucket )
export versioned_file=$(echo $json_input | jq -r .source.versioned_file )
export initial_version=$(echo $json_input | jq -r .source.initial_version )
export initial_content_text=$(echo $json_input | jq -r .source.initial_content_text )
export initial_content_binary=$(echo $json_input | jq -r .source.initial_content_binary )
export skip_download=$(echo $json_input | jq -r .params.skip_download )
export version=$(echo $json_input | jq -r .version.ref )


export filename=$(basename ${versioned_file})


if [ "${debug}" = true ] ; then
    >&2 echo $json_input
fi

gs_url="gs://${bucket}/${versioned_file}"

if [ -n "${version}" ]; then
    gs_url="${gs_url}#${version}"
fi

if gcloud storage objects describe "${gs_url}" > object_metadata.yml; then
    if [ -n "${initial_version}"]; then
        >&2 echo "Failed to retrieve object. Falling back to initial_version"
        touch $directory/$filename
        echo "{ \"version\": {\"ref\": \"${initial_version}\"}}"
        if [ -n "${initial_content_text}"]; then
            echo "${initial_content_text}" > $directory/$filename
        elif [ -n "${initial_content_text}"]; then
            base64 -d <<< "${initial_content_binary}" > $1/$filename
        fi
        exit 0
    else
      >&2 echo "Failed to retrieve object metadata and there is no initial version specified in source"
      exit 1
    fi    
fi


if [ "${debug}" = true ] ; then
    >&2 cat object_metadata.yml
fi

#### And the output will be
#
# {
#   "version": { "ref": "61cebf" },
#   "metadata": [
#     { "name": "commit", "value": "61cebf" },
#     { "name": "author", "value": "Hulk Hogan" }
#   ]
# }
#


current_version=$(cat object_metadata.yml | yq .generation)
creation_time=$(cat object_metadata.yml | yq .creation_time)
update_time=$(cat object_metadata.yml | yq .update_time)
md5_hash=$(cat object_metadata.yml | yq .md5_hash)
metageneration=$(cat object_metadata.yml | yq .metageneration)
storage_url=$(cat object_metadata.yml | yq .storage_url)
size=$(cat object_metadata.yml | yq .size)


if [ "$(cat object_metadata.yml | yq .generation)" == "$version" ]; then
    echo "{ \"version\": {\"ref\": \"${version}\"}, \
    \"metadata\": [ \
    { \"name\": \"creation_time\", \"value\": \"${creation_time}\"}, \
    { \"name\": \"update_time\", \"value\": \"${update_time}\"}, \
    { \"name\": \"md5_hash\", \"value\": \"${md5_hash}\"}, \
    { \"name\": \"metageneration\", \"value\": \"${metageneration}\"}, \
    { \"name\": \"storage_url\", \"value\": \"${storage_url}\"}, \
    { \"name\": \"size\", \"value\": \"${size}\"} \
    ] }"

else
    >&2 echo "We are unable to retrieve the metadata for this version. It may not exist anymore"
    exit 1
fi


#### We also need to download the object to $1 folder unless we are told the opposite
if [ "${skip_download}"  != true ]; then
    gcloud storage cp "$storage_url" "$directory"
    if [ "${unpack}"  = true ]; then
        extract "$directory/$filename" "$directory"
    fi
else
    >&2 echo "Skip download"
fi
mv object_metadata.yml $directory